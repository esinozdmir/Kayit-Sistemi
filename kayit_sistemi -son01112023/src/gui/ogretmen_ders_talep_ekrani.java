/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Timestamp;
import java.util.Date;

/**
 *
 * @author 90507
 */
public class ogretmen_ders_talep_ekrani extends javax.swing.JFrame {

    private static String kullaniciSicili;
    private static int yonetici_ogrenci_talep_sayisi;

    public ogretmen_ders_talep_ekrani(String kullaniciSicili, int yonetici_ogrenci_talep_sayisi) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setKullaniciSicili(kullaniciSicili);
        this.setYonetici_talep(yonetici_ogrenci_talep_sayisi);
    }

    public static void setKullaniciSicili(String newData) {
        kullaniciSicili = newData;
    }

    public static void setYonetici_talep(int newData) {
        yonetici_ogrenci_talep_sayisi = newData;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ders_bilgileri_table = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        secilidersialmamısogrencitable = new javax.swing.JTable();
        secilidersialmamısogrencilerbutton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ana_sayfa = new javax.swing.JButton();
        bir_onceki_sayfa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));

        jButton1.setText("Verdigim Dersleri Getir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ders_bilgileri_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Ders Kodu", "Ders Adı", "Ders Kredi"
            }
        ));
        jScrollPane3.setViewportView(ders_bilgileri_table);

        secilidersialmamısogrencitable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Ögrenci Sicili", "Ögrenci Adı", "Ögrenci Soyadı"
            }
        ));
        jScrollPane1.setViewportView(secilidersialmamısogrencitable);

        secilidersialmamısogrencilerbutton.setText("Seçili dersi almamış ögrencileri getir");
        secilidersialmamısogrencilerbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secilidersialmamısogrencilerbuttonActionPerformed(evt);
            }
        });

        jButton2.setText("Dersi alması için talep oluştur");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ana_sayfa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ana_sayfa.setText("Ana Sayfa");
        ana_sayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ana_sayfaActionPerformed(evt);
            }
        });

        bir_onceki_sayfa.setText("Bir Önceki sayfa");
        bir_onceki_sayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bir_onceki_sayfaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(ana_sayfa)
                            .addGap(18, 18, 18)
                            .addComponent(bir_onceki_sayfa))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addGap(130, 130, 130)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(secilidersialmamısogrencilerbutton)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ana_sayfa, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bir_onceki_sayfa))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(secilidersialmamısogrencilerbutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(384, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Connection connection = null;
        JComboBox<String> ogretmenVerdigiDersComboBox = new JComboBox<>();

        try {
            // PostgreSQL veritabanına bağlanma
            String jdbcUrl = "jdbc:postgresql://localhost:5433/esin";
            String kullaniciAdi = "postgres";
            String sifre = "12345";
            connection = (Connection) DriverManager.getConnection(jdbcUrl, kullaniciAdi, sifre);
            System.out.println("sasdas kullaniciSicili :" + kullaniciSicili);
            // SQL sorgusu hazırlama
            String sql = "SELECT ders.ders_kodu as DersKodu , ders.ders_adi  as DersAdı, ders.ders_kredi as Kredisi FROM ogretmen INNER JOIN ders ON ogretmen.ogretmen_ders_kodu = ders.ders_kodu  where ogretmen.ogretmen_sicil_no = ? ";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
            ResultSet resultSet = preparedStatement.executeQuery();

            ResultSetMetaData rowdata = (ResultSetMetaData) resultSet.getMetaData();
            int j = 0;
            int i = 0;
            int say = 1;
            int col = rowdata.getColumnCount();
            int k = rowdata.getColumnCount();
            String[] kolon = new String[k];
            for (j = 0; j < k; j++) {
                kolon[j] = rowdata.getColumnName(j + 1);
            }
            ders_bilgileri_table.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
            DefaultTableModel model = (DefaultTableModel) ders_bilgileri_table.getModel();
            model.setColumnIdentifiers(kolon);

            // Sonuçları kontrol etme
            while (resultSet.next()) {
                Object[] o = new Object[k];
                for (j = 0; j < k; j++) {
                    o[j] = resultSet.getObject(j + 1);
                }
                model.addRow(o);
                ders_bilgileri_table.setModel(model);
            }

            // JComboBox'ı GUI'da gösterme veya başka bir işlem yapma
            // Örneğin, bir JPanel üzerine eklemek için:
            // panel.add(ogretmenVerdigiDersComboBox);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Veri okuma hatası: " + e.getMessage(), "HATA", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (connection != null && !connection.isClosed()) {
                    connection.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void secilidersialmamısogrencilerbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secilidersialmamısogrencilerbuttonActionPerformed
        // TODO add your handling code here:
        try {
            // Şifreyi integer olarak parse etme
            int selectedRow = ders_bilgileri_table.getSelectedRow();
            String dersKodu = "";
            if (selectedRow != -1) {
                // Seçilen satırdan öğrenci sicil numarasını al
                Object dersKoduObject = ders_bilgileri_table.getValueAt(selectedRow, 0);
                dersKodu = dersKoduObject != null ? dersKoduObject.toString() : "";

                // JDBC sürücüsünü yükleme
                Class.forName("org.postgresql.Driver");

                // Veritabanına bağlanma
                Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

                // SQL sorgusu
                try {
                    String sql = "SELECT DISTINCT ogrenci.ogrenci_sicil_num as SicilNumarası, ogrenci.ogrenci_adi as Adı, ogrenci.ogrenci_soyadi as Soyadı "
                            + "FROM ogrenci "
                            + "WHERE TRIM(ogrenci.ogrenci_ders_kodu) != ? or ( TRIM(ogrenci.ogrenci_ders_kodu) = ? and ogrenci_anlasma_durumu != 'B')";
                    PreparedStatement preparedStatement = connection.prepareStatement(sql);
                    preparedStatement.setString(1, dersKodu);
                    preparedStatement.setString(2, dersKodu);
                    // Sorguyu çalıştırma ve sonucu alma
                    ResultSet resultSet = preparedStatement.executeQuery();

                    ResultSetMetaData rowdata = (ResultSetMetaData) resultSet.getMetaData();
                    int j = 0;
                    int i = 0;
                    int say = 1;
                    int col = rowdata.getColumnCount();
                    int k = rowdata.getColumnCount();
                    String[] kolon = new String[k];
                    for (j = 0; j < k; j++) {
                        kolon[j] = rowdata.getColumnName(j + 1);
                    }
                    secilidersialmamısogrencitable.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
                    DefaultTableModel model = (DefaultTableModel) secilidersialmamısogrencitable.getModel();
                    model.setColumnIdentifiers(kolon);

                    // Sonuçları kontrol etme
                    while (resultSet.next()) {
                        Object[] o = new Object[k];
                        for (j = 0; j < k; j++) {
                            o[j] = resultSet.getObject(j + 1);
                        }
                        model.addRow(o);
                        secilidersialmamısogrencitable.setModel(model);
                    }
                } catch (SQLException e) {
                }
                // PreparedStatement oluşturma

                // Bağlantıyı kapatma
                connection.close();

            } else {
                // Hiçbir satır seçilmediyse kullanıcıya uyarı verebilirsiniz
                System.out.println("Lütfen bir ders seçin.");
                JOptionPane.showMessageDialog(null, "Lütfen bir ders seçin. ", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

            }

        } catch (NumberFormatException e) {
            System.out.println("Geçersiz şifre formatı: " + e.getMessage());
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Veritabanı hatası: " + e.getMessage());
        }

    }//GEN-LAST:event_secilidersialmamısogrencilerbuttonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Connection connection22 = null;
        PreparedStatement preparedStatement22 = null;
        ResultSet resultSet = null;

        try {
            // JDBC sürücüsünü yükleme
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            connection22 = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            String sql22 = "SELECT sisteme_bas_tarih, sisteme_bit_tarih FROM yonetici";
            preparedStatement22 = connection22.prepareStatement(sql22);
            resultSet = preparedStatement22.executeQuery();
            if (resultSet.next()) {

                Timestamp sistemeBasTarih = resultSet.getTimestamp("sisteme_bas_tarih");
                Timestamp sistemeBitTarih = resultSet.getTimestamp("sisteme_bit_tarih");
                System.out.println(sistemeBasTarih);
                // Şu anki tarih/saat bilgisini al
                Timestamp now = new Timestamp(System.currentTimeMillis());

                // Tarih/saat karşılaştırması yap
                if (sistemeBasTarih.after(now)) {
                    System.out.println("Sisteme başlama tarihi ileride bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme başlama tarihi ileride bir zamanı gösteriyor. Sisteme başlama tarihi : " + sistemeBasTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else if (sistemeBitTarih.before(now)) {
                    System.out.println("Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor. Sistemin bitiş tarihi : " + sistemeBitTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    System.out.println("Sistem şu an aktif durumda.");
                    try {
                        Boolean flag = true;
                        // Şifreyi integer olarak parse etme
                        int selectedRow = ders_bilgileri_table.getSelectedRow();
                        String dersKodu = "";
                        if (selectedRow != -1) {
                            // Seçilen satırdan öğrenci sicil numarasını al
                            Object dersKoduObject = ders_bilgileri_table.getValueAt(selectedRow, 0);
                            dersKodu = dersKoduObject != null ? dersKoduObject.toString() : "";

                        } else {
                            // Hiçbir satır seçilmediyse kullanıcıya uyarı verebilirsiniz
                            System.out.println("Lütfen bir ders seçin.");
                            JOptionPane.showMessageDialog(null, "Lütfen bir ders seçin", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
                            flag = false;
                        }

                        int selectedRow2 = secilidersialmamısogrencitable.getSelectedRow();
                        String sicili = "";
                        if (selectedRow2 != -1) {
                            // Seçilen satırdan öğrenci sicil numarasını al
                            Object siciliObject = secilidersialmamısogrencitable.getValueAt(selectedRow2, 0);
                            sicili = siciliObject != null ? siciliObject.toString() : "";

                        } else {
                            // Hiçbir satır seçilmediyse kullanıcıya uyarı verebilirsiniz
                            System.out.println("Lütfen bir ders seçin.");
                            JOptionPane.showMessageDialog(null, "Lütfen bir ögrenci seçin", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
                            flag = false;
                        }

                        if (flag) {
                            // JDBC sürücüsünü yükleme
                            Class.forName("org.postgresql.Driver");

                            // Veritabanına bağlanma
                            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

                            // SQL sorgusu
                            try {

                                String deleteOgrSQL = "DELETE FROM kayit WHERE kayit_ogrenci_ders_kodu = ? and kayit_ogrenci_sicil_num =?";
                                PreparedStatement preparedStatement3 = connection.prepareStatement(deleteOgrSQL);
                                preparedStatement3.setString(1, dersKodu);
                                preparedStatement3.setInt(2, Integer.parseInt(sicili));
                                preparedStatement3.executeUpdate();

                                //ksyıt tsblodudns ogretmen sicilini at
                                String sql = "INSERT INTO kayit(kayit_ogrenci_ders_kodu,kayit_ogrenci_sicil_num ,kayit_ogretmen_sicil_num)VALUES (?, ? , ?)";
                                PreparedStatement preparedStatement = connection.prepareStatement(sql);
                                preparedStatement.setString(1, dersKodu);
                                preparedStatement.setInt(2, Integer.parseInt(sicili));
                                preparedStatement.setInt(3, Integer.parseInt(kullaniciSicili));
                                preparedStatement.executeUpdate();
                                // Sorguyu çalıştırma ve sonucu alma

                                Date sistemTarihi = new Date();
                                java.sql.Date sqlTarih = new java.sql.Date(sistemTarihi.getTime());

                                String sql11 = "INSERT INTO kayit_gecmisi (ogrenci_sicil_no, ogretmen_sicil_no, ders_kodu, islem_tarihi, islem_durumu) VALUES (?, ?, ?, ?, ?)";
                                PreparedStatement preparedStatement11 = connection.prepareStatement(sql11);
                                preparedStatement11.setInt(1, Integer.parseInt(sicili));
                                preparedStatement11.setInt(2, Integer.parseInt(kullaniciSicili));
                                preparedStatement11.setString(3, dersKodu);
                                preparedStatement11.setDate(4, sqlTarih);
                                preparedStatement11.setString(5, "Ögretmen ders alması için talep oluşturdu");
                                preparedStatement11.executeUpdate();
                                JOptionPane.showMessageDialog(null, "Ders ataması için talep oluşturuldu", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                            } catch (SQLException e) {
                                JOptionPane.showMessageDialog(null, "Hata oluştu!", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
                            }
                            connection.close();
                        }

                    } catch (NumberFormatException e) {
                        System.out.println("Geçersiz şifre formatı: " + e.getMessage());
                    } catch (ClassNotFoundException | SQLException e) {
                        System.out.println("Veritabanı hatası: " + e.getMessage());
                    }
                }
            } else {
                System.out.println("Belirtilen şartlara uyan kayıt bulunamadı.");
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        this.setVisible(false);
        new ogretmen_ders_talep_ekrani(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void ana_sayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ana_sayfaActionPerformed
        String message = "Ana sayfaya yonlendiriliyorsunuz.";
        JOptionPane.showMessageDialog(null, message, "Bilgi Mesajı", JOptionPane.INFORMATION_MESSAGE);

        this.setVisible(false);
        new kullanici_secim_ekrani().setVisible(true);
    }//GEN-LAST:event_ana_sayfaActionPerformed

    private void bir_onceki_sayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bir_onceki_sayfaActionPerformed
        String message = "Bir önceki sayfaya yonlendiriliyorsunuz.";
        JOptionPane.showMessageDialog(null, message, "Bilgi Mesajı", JOptionPane.INFORMATION_MESSAGE);

        this.setVisible(false);
        new ogretmen_panel(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);
    }//GEN-LAST:event_bir_onceki_sayfaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ogretmen_ders_talep_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ogretmen_ders_talep_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ogretmen_ders_talep_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ogretmen_ders_talep_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ogretmen_ders_talep_ekrani(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ana_sayfa;
    private javax.swing.JButton bir_onceki_sayfa;
    private javax.swing.JTable ders_bilgileri_table;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton secilidersialmamısogrencilerbutton;
    private javax.swing.JTable secilidersialmamısogrencitable;
    // End of variables declaration//GEN-END:variables
}
