/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 90507
 */
public class ogrenci_ders_talep_olustur_ekrani extends javax.swing.JFrame {

    /**
     * Creates new form ogrenci_ders_talep_olustur_ekranı
     */
    private static String kullaniciSicili;
    private static int yonetici_ogrenci_talep_sayisi;

    public ogrenci_ders_talep_olustur_ekrani(String kullaniciSicili, int yonetici_ogrenci_talep_sayisi) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setKullaniciSicil(kullaniciSicili);
        this.setYonetici_talep(yonetici_ogrenci_talep_sayisi);
    }

    public static void setKullaniciSicil(String newData) {
        kullaniciSicili = newData;
    }

    public static void setYonetici_talep(int newData) {
        yonetici_ogrenci_talep_sayisi = newData;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        iptal_buton = new javax.swing.JButton();
        ana_sayfa = new javax.swing.JButton();
        bir_onceki_sayfa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));

        jButton1.setText("Ders talebi oluşturabilecegin dersler için basınız");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Ders Kodu", "Ders adı", "Ogretmen adı", "Ogretmen soyadı", "Ogretmen sicili", "Talep sayısı"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Seçilen ders için talep oluştur");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Oluşturdugunuz ders taleplerini gorüntüle");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Ders Kodu", "Ders adı", "Ogretmen adı", "Ogretmen soyadı", "Ogretmen sicili", "Talep sayısı"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        iptal_buton.setText("Seçilen ders talebini iptal et");
        iptal_buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iptal_butonActionPerformed(evt);
            }
        });

        ana_sayfa.setText("Ana Sayfa");
        ana_sayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ana_sayfaActionPerformed(evt);
            }
        });

        bir_onceki_sayfa.setText("Bir Önceki sayfa");
        bir_onceki_sayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bir_onceki_sayfaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iptal_buton))
                .addGap(482, 482, 482))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(205, 205, 205)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(ana_sayfa, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bir_onceki_sayfa)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ana_sayfa)
                    .addComponent(bir_onceki_sayfa, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(iptal_buton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // Veritabanına ekleme işlemi
            String sql = " SELECT DISTINCT ogrenci.ogrenci_ders_kodu as DersKodu, ders.ders_adi as DersAdi ,ogretmen_adi as Ogretmen_adı , ogretmen_soyadi as Ogretmen_soyadı, ogretmen_sicil_no ,ogrenci_anlasma_talep_sayisi as talep_sayısı FROM ogrenci INNER JOIN ders ON ders.ders_kodu = ogrenci.ogrenci_ders_kodu INNER JOIN ogretmen ON ogretmen.ogretmen_ders_kodu = ogrenci.ogrenci_ders_kodu WHERE ogrenci.ogrenci_sicil_num = ?  and ogrenci_anlasma_durumu = 'A' ";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
            ResultSet resultSet = preparedStatement.executeQuery();

            ResultSetMetaData rowdata = (ResultSetMetaData) resultSet.getMetaData();
            int j = 0;
            int i = 0;
            int say = 1;
            int col = rowdata.getColumnCount();
            int k = rowdata.getColumnCount();
            String[] kolon = new String[k];
            for (j = 0; j < k; j++) {
                kolon[j] = rowdata.getColumnName(j + 1);
            }
            jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setColumnIdentifiers(kolon);
            while (resultSet.next()) {
                Object[] o = new Object[k];
                for (j = 0; j < k; j++) {
                    o[j] = resultSet.getObject(j + 1);
                }
                model.addRow(o);
                jTable1.setModel(model);
            }
            connection.close();
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Veritabanı hatası: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        PreparedStatement preparedStatement22 = null;
        ResultSet resultSet = null;

        try {
            Connection connection2 = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // JDBC sürücüsünü yükleme
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            connection2 = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            String sql22 = "SELECT sisteme_bas_tarih, sisteme_bit_tarih FROM yonetici";
            preparedStatement22 = connection2.prepareStatement(sql22);
            resultSet = preparedStatement22.executeQuery();
            if (resultSet.next()) {

                Timestamp sistemeBasTarih = resultSet.getTimestamp("sisteme_bas_tarih");
                Timestamp sistemeBitTarih = resultSet.getTimestamp("sisteme_bit_tarih");
                System.out.println(sistemeBasTarih);
                // Şu anki tarih/saat bilgisini al
                Timestamp now = new Timestamp(System.currentTimeMillis());

                // Tarih/saat karşılaştırması yap
                if (sistemeBasTarih.after(now)) {
                    System.out.println("Sisteme başlama tarihi ileride bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme başlama tarihi ileride bir zamanı gösteriyor. Sisteme başlama tarihi : " + sistemeBasTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else if (sistemeBitTarih.before(now)) {
                    System.out.println("Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor. Sistemin bitiş tarihi : " + sistemeBitTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    System.out.println("Sistem şu an aktif durumda.");

                    int selectedRow = jTable1.getSelectedRow();
                    String dersKodu = "", ogretmen_sicili = "";
                    int talepsayi = 0;
                    if (selectedRow != -1) {
                        // Seçilen satırdan öğrenci sicil numarasını al
                        Object dersKoduObject = jTable1.getValueAt(selectedRow, 0);
                        dersKodu = dersKoduObject != null ? dersKoduObject.toString() : "";
                        Object ogretmen_siciliObject = jTable1.getValueAt(selectedRow, 4);
                        ogretmen_sicili = ogretmen_siciliObject != null ? ogretmen_siciliObject.toString() : "";
                        Object talepsayiObject = jTable1.getValueAt(selectedRow, 5);
                        talepsayi = Integer.parseInt(talepsayiObject != null ? talepsayiObject.toString() : "0");

                        if (talepsayi < yonetici_ogrenci_talep_sayisi) {
                            talepsayi = talepsayi + 1;
                            String sql3 = "UPDATE ogrenci SET ogrenci_ogretmen_sicil_num = ? , ogrenci_anlasma_talep_sayisi = ? , ogrenci_anlasma_durumu = 'H'  WHERE ogrenci_sicil_num = ? AND ogrenci_ders_kodu = ?  AND ? = (SELECT ogretmen_sicil_no FROM ogretmen WHERE ogretmen_sicil_no = ? and ogretmen_ders_kodu = ? ) ";
                            PreparedStatement preparedStatement7 = connection2.prepareStatement(sql3);
                            preparedStatement7.setInt(1, Integer.parseInt(ogretmen_sicili));
                            preparedStatement7.setInt(2, talepsayi);
                            preparedStatement7.setInt(3, Integer.parseInt(kullaniciSicili));
                            preparedStatement7.setString(4, dersKodu);
                            preparedStatement7.setInt(5, Integer.parseInt(ogretmen_sicili));
                            preparedStatement7.setInt(6, Integer.parseInt(ogretmen_sicili));
                            preparedStatement7.setString(7, dersKodu);
                            preparedStatement7.executeUpdate();

                            Date sistemTarihi = new Date();
                            java.sql.Date sqlTarih = new java.sql.Date(sistemTarihi.getTime());

                            String sql11 = "INSERT INTO kayit_gecmisi (ogrenci_sicil_no, ogretmen_sicil_no, ders_kodu, islem_tarihi, islem_durumu) VALUES (?, ?, ?, ?, ?)";
                            PreparedStatement preparedStatement11 = connection2.prepareStatement(sql11);
                            preparedStatement11.setInt(1, Integer.parseInt(kullaniciSicili));
                            preparedStatement11.setInt(2, Integer.parseInt(ogretmen_sicili));
                            preparedStatement11.setString(3, dersKodu);
                            preparedStatement11.setDate(4, sqlTarih);
                            preparedStatement11.setString(5, "Ögrenci ders talep oluşturdu");
                            preparedStatement11.executeUpdate();

                            JOptionPane.showMessageDialog(null, "Ders talebi oluşturulmuştur", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                        } else {
                            JOptionPane.showMessageDialog(null, "yoneticinin belirlediği talep sayısını aştınız.Bu yüzden işleminiz gerçekleştirilemiyor", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                        }
                    } else {
                        // Hiçbir satır seçilmediyse kullanıcıya uyarı verebilirsiniz
                        System.out.println("Lütfen bir ders seçin.");
                        JOptionPane.showMessageDialog(null, "Lütfen bir kayıt seçin", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Ders talebi bulunacak ders bilgisi yok", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                System.out.println("Belirtilen şartlara uyan kayıt bulunamadı.");
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }

        this.setVisible(false);
        new ogrenci_panel(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        try {
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // Veritabanına ekleme işlemi
            String sql = " SELECT DISTINCT ogrenci.ogrenci_ders_kodu as DersKodu, ders.ders_adi as DersAdi ,ogretmen_adi as Ogretmen_adı , ogretmen_soyadi as Ogretmen_soyadı, ogretmen_sicil_no ,ogrenci_anlasma_talep_sayisi as talep_sayısı FROM ogrenci INNER JOIN ders ON ders.ders_kodu = ogrenci.ogrenci_ders_kodu INNER JOIN ogretmen ON ogretmen.ogretmen_ders_kodu = ogrenci.ogrenci_ders_kodu WHERE ogrenci.ogrenci_sicil_num = ?  and ogrenci_anlasma_durumu = 'H'  and ogrenci.ogrenci_ogretmen_sicil_num=ogretmen.ogretmen_sicil_no  ";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
            ResultSet resultSet = preparedStatement.executeQuery();

            ResultSetMetaData rowdata = (ResultSetMetaData) resultSet.getMetaData();
            int j = 0;
            int i = 0;
            int say = 1;
            int col = rowdata.getColumnCount();
            int k = rowdata.getColumnCount();
            String[] kolon = new String[k];
            for (j = 0; j < k; j++) {
                kolon[j] = rowdata.getColumnName(j + 1);
            }
            jTable2.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setColumnIdentifiers(kolon);
            while (resultSet.next()) {
                Object[] o = new Object[k];
                for (j = 0; j < k; j++) {
                    o[j] = resultSet.getObject(j + 1);
                }
                model.addRow(o);
                jTable2.setModel(model);
            }
            connection.close();
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Veritabanı hatası: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void iptal_butonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iptal_butonActionPerformed
        // TODO add your handling code here:

        PreparedStatement preparedStatement22 = null;
        ResultSet resultSet = null;

        try {
            Connection connection2 = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // JDBC sürücüsünü yükleme
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            connection2 = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            String sql22 = "SELECT sisteme_bas_tarih, sisteme_bit_tarih FROM yonetici";
            preparedStatement22 = connection2.prepareStatement(sql22);
            resultSet = preparedStatement22.executeQuery();
            if (resultSet.next()) {

                Timestamp sistemeBasTarih = resultSet.getTimestamp("sisteme_bas_tarih");
                Timestamp sistemeBitTarih = resultSet.getTimestamp("sisteme_bit_tarih");
                System.out.println(sistemeBasTarih);
                // Şu anki tarih/saat bilgisini al
                Timestamp now = new Timestamp(System.currentTimeMillis());

                // Tarih/saat karşılaştırması yap
                if (sistemeBasTarih.after(now)) {
                    System.out.println("Sisteme başlama tarihi ileride bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme başlama tarihi ileride bir zamanı gösteriyor. Sisteme başlama tarihi : " + sistemeBasTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else if (sistemeBitTarih.before(now)) {
                    System.out.println("Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor. Sistemin bitiş tarihi : " + sistemeBitTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    System.out.println("Sistem şu an aktif durumda.");

                    int selectedRow = jTable2.getSelectedRow();
                    String dersKodu = "", ogretmen_sicili = "";
                    int talepsayi = 0;
                    if (selectedRow != -1) {
                        // Seçilen satırdan öğrenci sicil numarasını al
                        Object dersKoduObject = jTable2.getValueAt(selectedRow, 0);
                        dersKodu = dersKoduObject != null ? dersKoduObject.toString() : "";
                        Object ogretmen_siciliObject = jTable2.getValueAt(selectedRow, 4);
                        ogretmen_sicili = ogretmen_siciliObject != null ? ogretmen_siciliObject.toString() : "";
                        Object talepsayiObject = jTable2.getValueAt(selectedRow, 5);
                        talepsayi = Integer.parseInt(talepsayiObject != null ? talepsayiObject.toString() : "0");
                        System.out.println(talepsayi + "---------" + ogretmen_sicili + "******" + kullaniciSicili + "++++" + dersKodu);

                        if (talepsayi <= yonetici_ogrenci_talep_sayisi) {
                            System.out.println("---------" + ogretmen_sicili + "******" + kullaniciSicili + "++++" + dersKodu);
                            String sql3 = "UPDATE ogrenci SET ogrenci_ogretmen_sicil_num = ? , ogrenci_anlasma_durumu = 'A' WHERE ogrenci_ogretmen_sicil_num = ? and ogrenci_sicil_num = ? and ogrenci_ders_kodu = ? ";
                            PreparedStatement preparedStatement7 = connection2.prepareStatement(sql3);
                            preparedStatement7.setNull(1, java.sql.Types.INTEGER);
                            preparedStatement7.setInt(2, Integer.parseInt(ogretmen_sicili));
                            preparedStatement7.setInt(3, Integer.parseInt(kullaniciSicili));
                            preparedStatement7.setString(4, dersKodu);
                            preparedStatement7.executeUpdate();

                            Date sistemTarihi = new Date();
                            java.sql.Date sqlTarih = new java.sql.Date(sistemTarihi.getTime());

                            String sql11 = "INSERT INTO kayit_gecmisi (ogrenci_sicil_no, ogretmen_sicil_no, ders_kodu, islem_tarihi, islem_durumu) VALUES (?, ?, ?, ?, ?)";
                            PreparedStatement preparedStatement11 = connection2.prepareStatement(sql11);
                            preparedStatement11.setInt(1, Integer.parseInt(kullaniciSicili));
                            preparedStatement11.setInt(2, Integer.parseInt(ogretmen_sicili));
                            preparedStatement11.setString(3, dersKodu);
                            preparedStatement11.setDate(4, sqlTarih);
                            preparedStatement11.setString(5, "Ögrenci ders talebi iptal etti");
                            preparedStatement11.executeUpdate();

                            JOptionPane.showMessageDialog(null, "Talebiniz başarılıyla iptal edilmiştir", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                        } else {
                            JOptionPane.showMessageDialog(null, "Yoneticinin belirlediği talep sayısını aştınız.Bu yüzden işleminiz gerçekleştirilemiyor", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                        }

                    } else {
                        // Hiçbir satır seçilmediyse kullanıcıya uyarı verebilirsiniz
                        System.out.println("Lütfen bir ders seçin.");
                        JOptionPane.showMessageDialog(null, "Lütfen bir kayıt seçin", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                    }

                }
            } else {
                System.out.println("Belirtilen şartlara uyan kayıt bulunamadı.");
                JOptionPane.showMessageDialog(null, "Belirtilen şartlara uyan kayıt bulunamadı.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

            }
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Hata oluştu.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
            e.printStackTrace();
        }
        this.setVisible(false);
        new ogrenci_panel(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);

    }//GEN-LAST:event_iptal_butonActionPerformed

    private void ana_sayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ana_sayfaActionPerformed
        String message = "Ana sayfaya yonlendiriliyorsunuz.";
        JOptionPane.showMessageDialog(null, message, "Bilgi Mesajı", JOptionPane.INFORMATION_MESSAGE);

        this.setVisible(false);
        new kullanici_secim_ekrani().setVisible(true);
    }//GEN-LAST:event_ana_sayfaActionPerformed

    private void bir_onceki_sayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bir_onceki_sayfaActionPerformed
        String message = "Bir önceki sayfaya yonlendiriliyorsunuz.";
        JOptionPane.showMessageDialog(null, message, "Bilgi Mesajı", JOptionPane.INFORMATION_MESSAGE);

        this.setVisible(false);
        new ogrenci_panel(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);
    }//GEN-LAST:event_bir_onceki_sayfaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ogrenci_ders_talep_olustur_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ogrenci_ders_talep_olustur_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ogrenci_ders_talep_olustur_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ogrenci_ders_talep_olustur_ekrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ogrenci_ders_talep_olustur_ekrani(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ana_sayfa;
    private javax.swing.JButton bir_onceki_sayfa;
    private javax.swing.JButton iptal_buton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
