/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Timestamp;
import java.util.Date;

/**
 *
 * @author 90507
 */
public class ogretmen_panel extends javax.swing.JFrame {

    private static String kullaniciSicili;
    private static int yonetici_ogrenci_talep_sayisi;

    public ogretmen_panel(String kullaniciSicili, int yonetici_ogrenci_talep_sayisi) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setKullaniciSicili(kullaniciSicili);
        this.setYonetici_talep(yonetici_ogrenci_talep_sayisi);
    }

    public static void setKullaniciSicili(String newData) {
        kullaniciSicili = newData;
    }

    public static void setYonetici_talep(int newData) {
        yonetici_ogrenci_talep_sayisi = newData;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ana_sayfa = new javax.swing.JButton();
        ogretmenin_verdigi_dersler_button = new javax.swing.JButton();
        ogretmen_verdigi_ders_combobox = new javax.swing.JComboBox<>();
        ogretmen_mesaj_buton = new javax.swing.JButton();
        ogretmen_ilgi_alani_kaydet_buton = new javax.swing.JButton();
        ogretmen_ılgı_alanı_textfield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        talep_eden_ogrenci_listesi_table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ders_bilgileri_table = new javax.swing.JTable();
        formülüme_göre_ogrencileri_sırala_button = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        talep_onayla_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        ana_sayfa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ana_sayfa.setText("Ana Sayfa");
        ana_sayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ana_sayfaActionPerformed(evt);
            }
        });

        ogretmenin_verdigi_dersler_button.setText("Ögretmenin Verdiği Dersler");
        ogretmenin_verdigi_dersler_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ogretmenin_verdigi_dersler_buttonActionPerformed(evt);
            }
        });

        ogretmen_mesaj_buton.setText("Mesaj Sayfasi");
        ogretmen_mesaj_buton.setToolTipText("");
        ogretmen_mesaj_buton.setActionCommand("Mesaj Sayfası");
        ogretmen_mesaj_buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ogretmen_mesaj_butonActionPerformed(evt);
            }
        });

        ogretmen_ilgi_alani_kaydet_buton.setText("İlgi Alanımı Kaydet");
        ogretmen_ilgi_alani_kaydet_buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ogretmen_ilgi_alani_kaydet_butonActionPerformed(evt);
            }
        });

        jLabel1.setText("İlgi alanı:");

        jButton1.setText("Derslerime talep oluşturan Ögrenci Listesi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        talep_eden_ogrenci_listesi_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ögrenci sicil numarası", "Ögrenci adı", "Ögrenci soyadi", "Ders  Kodu"
            }
        ));
        jScrollPane1.setViewportView(talep_eden_ogrenci_listesi_table);

        jButton2.setText("Verdigim derslere talep yada atama yapılmamıs ögrenci listesi");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ögrenci sicil numarası", "Ögrenci adı", "Ögrenci soyadı", "Ders Kodu"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton3.setText("Ders Bilgilerini Getir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        ders_bilgileri_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Ders Kodu", "Ders Adı", "Ders Kredi"
            }
        ));
        jScrollPane3.setViewportView(ders_bilgileri_table);

        formülüme_göre_ogrencileri_sırala_button.setText("Formülüme göre Ögrencileri Sırala Ekranına Git");
        formülüme_göre_ogrencileri_sırala_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formülüme_göre_ogrencileri_sırala_buttonActionPerformed(evt);
            }
        });

        jButton4.setText("Dersi alması için talep bulun sayfasına git");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        talep_onayla_button.setText("Seçiln satırdaki talebi onayla");
        talep_onayla_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                talep_onayla_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(talep_onayla_button, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jButton3))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ogretmenin_verdigi_dersler_button)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ogretmen_ılgı_alanı_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ogretmen_ilgi_alani_kaydet_buton)
                                    .addComponent(ogretmen_verdigi_ders_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ana_sayfa)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ogretmen_mesaj_buton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(formülüme_göre_ogrencileri_sırala_button)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(923, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ana_sayfa)
                    .addComponent(ogretmen_mesaj_buton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formülüme_göre_ogrencileri_sırala_button)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ogretmenin_verdigi_dersler_button, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ogretmen_verdigi_ders_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ogretmen_ilgi_alani_kaydet_buton)
                    .addComponent(ogretmen_ılgı_alanı_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(talep_onayla_button)
                        .addGap(16, 16, 16)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ana_sayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ana_sayfaActionPerformed
        String message = "Ana sayfaya yonlendiriliyorsunuz.";
        JOptionPane.showMessageDialog(null, message, "Bilgi Mesajı", JOptionPane.INFORMATION_MESSAGE);

        this.setVisible(false);
        new kullanici_secim_ekrani().setVisible(true);
    }//GEN-LAST:event_ana_sayfaActionPerformed

    private void ogretmenin_verdigi_dersler_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ogretmenin_verdigi_dersler_buttonActionPerformed
        Connection connection = null;
        JComboBox<String> ogretmenVerdigiDersComboBox = new JComboBox<>();

        try {
            // PostgreSQL veritabanına bağlanma
            String jdbcUrl = "jdbc:postgresql://localhost:5433/esin";
            String kullaniciAdi = "postgres";
            String sifre = "12345";
            connection = (Connection) DriverManager.getConnection(jdbcUrl, kullaniciAdi, sifre);

            System.out.println("kullaniciSicili:" + kullaniciSicili);
            // SQL sorgusu hazırlama
            String sql = "SELECT ders_adi FROM ogretmen INNER JOIN ders ON ogretmen.ogretmen_ders_kodu = ders.ders_kodu  where ogretmen.ogretmen_sicil_no = ? ";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
            ResultSet resultSet = preparedStatement.executeQuery();

            boolean flag = false;
            int i = 0;

            // Verileri JComboBox'a ekleme
            while (resultSet.next()) {
                flag = true;
                System.out.println("kayıt geldi");
                ogretmen_verdigi_ders_combobox.insertItemAt(resultSet.getString("ders_adi"), i);
                i++;
            }

            if (flag) {
                ogretmen_verdigi_ders_combobox.setVisible(true);
                ogretmen_verdigi_ders_combobox.setSelectedIndex(0);
                System.out.println("kayıt geldi");
                JOptionPane.showMessageDialog(null, "Verilen dersler getirildi", "BİLGİ", JOptionPane.WARNING_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "Verilen ders kaydı bulunamadı", "BİLGİ", JOptionPane.WARNING_MESSAGE);
            }

            // JComboBox'ı GUI'da gösterme veya başka bir işlem yapma
            // Örneğin, bir JPanel üzerine eklemek için:
            // panel.add(ogretmenVerdigiDersComboBox);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Veri okuma hatası: " + e.getMessage(), "HATA", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (connection != null && !connection.isClosed()) {
                    connection.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_ogretmenin_verdigi_dersler_buttonActionPerformed

    private void ogretmen_mesaj_butonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ogretmen_mesaj_butonActionPerformed
        this.setVisible(false);
        new ogretmen_mesaj_ekrani(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);


    }//GEN-LAST:event_ogretmen_mesaj_butonActionPerformed

    private void ogretmen_ilgi_alani_kaydet_butonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ogretmen_ilgi_alani_kaydet_butonActionPerformed
        // TODO add your handling code here:

        try {
            // Şifreyi integer olarak parse etme

            // JDBC sürücüsünü yükleme
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // Veritabanına ekleme işlemi
            Boolean flag = false;
            String ilgialanısorgu = "SELECT ogretmen_ilgi_alanlari FROM ogretmen where ogretmen_sicil_no =? ";
            PreparedStatement preparedStatement = connection.prepareStatement(ilgialanısorgu);
            preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
            ResultSet resultSet = preparedStatement.executeQuery();
            String ilgi_alani = "";
            if (resultSet.next()) {
                ilgi_alani = resultSet.getString("ogretmen_ilgi_alanlari");
            } else {
                System.out.println("Veri bulunamadı.");
            }
            if (!ogretmen_ılgı_alanı_textfield.getText().equals(ilgi_alani)) {

                String sql = "UPDATE ogretmen SET ogretmen_ilgi_alanlari=? WHERE ogretmen_sicil_no=?";
                PreparedStatement preparedStatement5 = connection.prepareStatement(sql);

                // Parametreleri ayarlama
                preparedStatement5.setString(1, ogretmen_ılgı_alanı_textfield.getText());
                preparedStatement5.setInt(2, Integer.parseInt(kullaniciSicili));
                int affectedRows = preparedStatement5.executeUpdate();

                if (affectedRows > 0) {
                    JOptionPane.showMessageDialog(null, "Öğretmen bilgileri güncellendi.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    JOptionPane.showMessageDialog(null, "Güncellenecek öğretmen bulunamadı.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {

                JOptionPane.showMessageDialog(null, " Yazılan ilgili alanı öğretmen ilgi alanı olarak ekliydi", "Bilgi", JOptionPane.INFORMATION_MESSAGE);

            }

            connection.close();

        } catch (Exception e) {
            System.out.println("Veritabanı hatası: " + e.getMessage());
        }

    }//GEN-LAST:event_ogretmen_ilgi_alani_kaydet_butonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            // Şifreyi integer olarak parse etme

            // JDBC sürücüsünü yükleme
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // SQL sorgusu
            try {
                String sql = "SELECT ogrenci.ogrenci_sicil_num as SicilNumarası, ogrenci.ogrenci_adi as Adı, ogrenci.ogrenci_soyadi as Soyadı ,ogrenci.ogrenci_ders_kodu  as DersKodu , ders.ders_adi as DersAdı  "
                        + "FROM ogrenci "
                        + "INNER JOIN ogretmen ON ogretmen.ogretmen_ders_kodu = ogrenci.ogrenci_ders_kodu INNER JOIN ders ON ders.ders_kodu = ogrenci.ogrenci_ders_kodu "
                        + "WHERE ogrenci.ogrenci_anlasma_durumu = 'H"
                        + "' "
                        + "AND ogrenci.ogrenci_ders_kodu = ogretmen.ogretmen_ders_kodu "
                        + "AND ogretmen.ogretmen_sicil_no = ?";
                PreparedStatement preparedStatement = connection.prepareStatement(sql);
                preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
                // Sorguyu çalıştırma ve sonucu alma
                ResultSet resultSet = preparedStatement.executeQuery();

                ResultSetMetaData rowdata = (ResultSetMetaData) resultSet.getMetaData();
                int j = 0;
                int i = 0;
                int say = 1;
                int col = rowdata.getColumnCount();
                int k = rowdata.getColumnCount();
                String[] kolon = new String[k];
                for (j = 0; j < k; j++) {
                    kolon[j] = rowdata.getColumnName(j + 1);
                }
                talep_eden_ogrenci_listesi_table.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
                DefaultTableModel model = (DefaultTableModel) talep_eden_ogrenci_listesi_table.getModel();
                model.setColumnIdentifiers(kolon);

                // Sonuçları kontrol etme
                while (resultSet.next()) {
                    Object[] o = new Object[k];
                    for (j = 0; j < k; j++) {
                        o[j] = resultSet.getObject(j + 1);
                    }
                    model.addRow(o);
                    talep_eden_ogrenci_listesi_table.setModel(model);
                }
            } catch (SQLException e) {
            }
            // PreparedStatement oluşturma

            // Bağlantıyı kapatma
            connection.close();
        } catch (NumberFormatException e) {
            System.out.println("Geçersiz şifre formatı: " + e.getMessage());
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Veritabanı hatası: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        try {
            // Şifreyi integer olarak parse etme

            // JDBC sürücüsünü yükleme
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // SQL sorgusu
            try {

                String sql = "SELECT ogrenci.ogrenci_sicil_num as SicilNumarası, ogrenci.ogrenci_adi as Adı, ogrenci.ogrenci_soyadi as Soyadı ,ogrenci.ogrenci_ders_kodu  as DersKodu "
                        + "FROM ogrenci "
                        + "INNER JOIN ogretmen ON ogretmen.ogretmen_ders_kodu = ogrenci.ogrenci_ders_kodu INNER JOIN ders ON ders.ders_kodu = ogrenci.ogrenci_ders_kodu "
                        + "WHERE ogrenci.ogrenci_anlasma_durumu = 'A' "
                        + "AND ogrenci.ogrenci_ders_kodu = ogretmen.ogretmen_ders_kodu "
                        + "AND ogretmen.ogretmen_sicil_no = ?";
                PreparedStatement preparedStatement = connection.prepareStatement(sql);
                preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
                // Sorguyu çalıştırma ve sonucu alma
                ResultSet resultSet = preparedStatement.executeQuery();

                ResultSetMetaData rowdata = (ResultSetMetaData) resultSet.getMetaData();
                int j = 0;
                int i = 0;
                int say = 1;
                int col = rowdata.getColumnCount();
                int k = rowdata.getColumnCount();
                String[] kolon = new String[k];
                for (j = 0; j < k; j++) {
                    kolon[j] = rowdata.getColumnName(j + 1);
                }
                //jTable1 :Talebi yapılmamış Derslerime ait Ögrenci Listesi
                jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setColumnIdentifiers(kolon);

                // Sonuçları kontrol etme
                while (resultSet.next()) {
                    Object[] o = new Object[k];
                    for (j = 0; j < k; j++) {
                        o[j] = resultSet.getObject(j + 1);
                    }
                    model.addRow(o);
                    jTable1.setModel(model);
                }
            } catch (SQLException e) {
            }
            // PreparedStatement oluşturma

            // Bağlantıyı kapatma
            connection.close();
        } catch (NumberFormatException e) {
            System.out.println("Geçersiz şifre formatı: " + e.getMessage());
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Veritabanı hatası: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        int selectedRow2 = talep_eden_ogrenci_listesi_table.getSelectedRow();
        String dersKodu = null;
        // Eğer hiçbir satır seçilmediyse -1 döner
        if (selectedRow2 != -1) {
            // Seçilen satırdan öğrenci sicil numarasını al
            Object dersKoduObject = talep_eden_ogrenci_listesi_table.getValueAt(selectedRow2, 3);
            dersKodu = dersKoduObject != null ? dersKoduObject.toString() : "";

            // Alınan değerleri kullanabilirsiniz
        }
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            // Seçilen satırdan öğrenci sicil numarasını al
            Object dersKoduObject = jTable1.getValueAt(selectedRow, 3);
            dersKodu = dersKoduObject != null ? dersKoduObject.toString() : "";

        } else {
            // Hiçbir satır seçilmediyse kullanıcıya uyarı verebilirsiniz
            System.out.println("Lütfen bir öğrenci seçin.");
            JOptionPane.showMessageDialog(null, "Lütfen bir öğrenci seçin.", "HATA", JOptionPane.ERROR_MESSAGE);

        }
        if (null != dersKodu || "".equals(dersKodu)) {
            try {
                // Şifreyi integer olarak parse etme
                // JDBC sürücüsünü yükleme
                Class.forName("org.postgresql.Driver");

                // Veritabanına bağlanma
                Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

                // SQL sorgusu
                try {
                    String sql = "SELECT ders_kodu as DersKodu ,ders_adi as DersAdı , ders_kredi as DersKredi "
                            + "FROM ders "
                            + "WHERE ders_kodu =  ?";
                    PreparedStatement preparedStatement = connection.prepareStatement(sql);
                    preparedStatement.setString(1, dersKodu);
                    // Sorguyu çalıştırma ve sonucu alma
                    ResultSet resultSet = preparedStatement.executeQuery();

                    ResultSetMetaData rowdata = (ResultSetMetaData) resultSet.getMetaData();
                    int j = 0;
                    int i = 0;
                    int say = 1;
                    int col = rowdata.getColumnCount();
                    int k = rowdata.getColumnCount();
                    String[] kolon = new String[k];
                    for (j = 0; j < k; j++) {
                        kolon[j] = rowdata.getColumnName(j + 1);
                    }
                    ders_bilgileri_table.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
                    DefaultTableModel model = (DefaultTableModel) ders_bilgileri_table.getModel();
                    model.setColumnIdentifiers(kolon);

                    // Sonuçları kontrol etme
                    while (resultSet.next()) {
                        Object[] o = new Object[k];
                        for (j = 0; j < k; j++) {
                            o[j] = resultSet.getObject(j + 1);
                        }
                        model.addRow(o);
                        ders_bilgileri_table.setModel(model);
                    }
                } catch (SQLException e) {
                }
                // PreparedStatement oluşturma

                // Bağlantıyı kapatma
                connection.close();
            } catch (NumberFormatException e) {
                System.out.println("Geçersiz şifre formatı: " + e.getMessage());
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println("Veritabanı hatası: " + e.getMessage());
            }

        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void formülüme_göre_ogrencileri_sırala_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formülüme_göre_ogrencileri_sırala_buttonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new ogretmen_formul_ekrani(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);
    }//GEN-LAST:event_formülüme_göre_ogrencileri_sırala_buttonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new ogretmen_ders_talep_ekrani(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void talep_onayla_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_talep_onayla_buttonActionPerformed
        PreparedStatement preparedStatement22 = null;
        ResultSet resultSet22 = null;

        try {
            // JDBC sürücüsünü yükleme
            Connection connection2 = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            // JDBC sürücüsünü yükleme
            Class.forName("org.postgresql.Driver");

            // Veritabanına bağlanma
            connection2 = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

            String sql22 = "SELECT sisteme_bas_tarih, sisteme_bit_tarih FROM yonetici";
            preparedStatement22 = connection2.prepareStatement(sql22);
            resultSet22 = preparedStatement22.executeQuery();
            if (resultSet22.next()) {

                Timestamp sistemeBasTarih = resultSet22.getTimestamp("sisteme_bas_tarih");
                Timestamp sistemeBitTarih = resultSet22.getTimestamp("sisteme_bit_tarih");
                System.out.println(sistemeBasTarih);
                // Şu anki tarih/saat bilgisini al
                Timestamp now = new Timestamp(System.currentTimeMillis());

                // Tarih/saat karşılaştırması yap
                if (sistemeBasTarih.after(now)) {
                    System.out.println("Sisteme başlama tarihi ileride bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme başlama tarihi ileride bir zamanı gösteriyor. Sisteme başlama tarihi : " + sistemeBasTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else if (sistemeBitTarih.before(now)) {
                    System.out.println("Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor.");
                    JOptionPane.showMessageDialog(null, "Sisteme bitiş tarihi geçmiş bir zamanı gösteriyor. Sistemin bitiş tarihi : " + sistemeBitTarih, "Bilgi", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    System.out.println("Sistem şu an aktif durumda.");
                    // TODO add your handling code here:
                    int kontenjan_sayı = 0;
                    try {
                        // Şifreyi integer olarak parse etme

                        // JDBC sürücüsünü yükleme
                        Class.forName("org.postgresql.Driver");

                        // Veritabanına bağlanma
                        Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

                        // SQL sorgusu
                        try {
                            String sql = "SELECT DISTINCT ogretmen_kontenjan_bilgisi FROM ogretmen WHERE ogretmen.ogretmen_sicil_no = ?";
                            PreparedStatement preparedStatement = connection.prepareStatement(sql);
                            preparedStatement.setInt(1, Integer.parseInt(kullaniciSicili));
                            // Sorguyu çalıştırma ve sonucu alma
                            ResultSet resultSet = preparedStatement.executeQuery();
                            if (resultSet.next()) {
                                kontenjan_sayı = Integer.parseInt(resultSet.getString("ogretmen_kontenjan_bilgisi"));

                            } else {
                                System.out.println("Veri bulunamadı.");
                            }

                        } catch (SQLException e) {
                        }
                        // PreparedStatement oluşturma

                        // Bağlantıyı kapatma
                        connection.close();
                    } catch (NumberFormatException e) {
                        System.out.println("Geçersiz şifre formatı: " + e.getMessage());
                    } catch (ClassNotFoundException | SQLException e) {
                        System.out.println("Veritabanı hatası: " + e.getMessage());
                    }

                    if (kontenjan_sayı > 0) {

                        int selectedRow = talep_eden_ogrenci_listesi_table.getSelectedRow();
                        String dersKodu = "", ogrencisicili = "";
                        if (selectedRow != -1) {
                            // Seçilen satırdan öğrenci sicil numarasını al
                            Object dersKoduObject = talep_eden_ogrenci_listesi_table.getValueAt(selectedRow, 3);
                            dersKodu = dersKoduObject != null ? dersKoduObject.toString() : "";

                            Object ogrencisiciliObject = talep_eden_ogrenci_listesi_table.getValueAt(selectedRow, 0);
                            ogrencisicili = ogrencisiciliObject != null ? ogrencisiciliObject.toString() : "";

                            try {
                                // Şifreyi integer olarak parse etme

                                // JDBC sürücüsünü yükleme
                                Class.forName("org.postgresql.Driver");

                                // Veritabanına bağlanma
                                Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5433/esin", "postgres", "12345");

                                // SQL sorgusu
                                try {
                                    System.out.println("kontenjan" + kontenjan_sayı);
                                    System.out.println("ders kodu:" + dersKodu);

                                    String sql2 = "UPDATE ogrenci SET ogrenci_anlasma_durumu = 'B' WHERE ogrenci_ders_kodu = ?";
                                    PreparedStatement preparedStatement2 = connection.prepareStatement(sql2);
                                    preparedStatement2.setString(1, dersKodu);

                                    // Sorguyu çalıştırma ve etkilenen satır sayısını almak için executeUpdate() kullanılır
                                    int affectedRows = preparedStatement2.executeUpdate();

                                    // Etkilenen satır sayısını kontrol etme
                                    if (affectedRows > 0) {
                                        System.out.println("Öğrenci anlaşma durumu güncellendi.");
                                    } else {
                                        System.out.println("Belirtilen ders kodu ile eşleşen öğrenci bulunamadı.");
                                    }

                                    kontenjan_sayı = kontenjan_sayı - 1;
                                    System.out.println("kontenjan" + kontenjan_sayı);
                                    System.out.println("ders kodu:" + dersKodu);
                                    System.out.println("kullaniciSicili:" + kullaniciSicili);
                                    String sql12 = "UPDATE ogretmen SET  ogretmen_kontenjan_bilgisi = ? WHERE ogretmen_sicil_no = ?";
                                    PreparedStatement preparedStatement12 = connection.prepareStatement(sql12);
                                    preparedStatement12.setInt(1, kontenjan_sayı);
                                    preparedStatement12.setInt(2, Integer.parseInt(kullaniciSicili));
                                    int affectedRows2 = preparedStatement12.executeUpdate();

                                    // Etkilenen satır sayısını kontrol etme
                                    if (affectedRows2 > 0) {
                                        System.out.println("Öğrenci anlaşma durumu güncellendi.");
                                        Date sistemTarihi = new Date();
                                        java.sql.Date sqlTarih = new java.sql.Date(sistemTarihi.getTime());
                                        String sql11 = "INSERT INTO kayit_gecmisi ( ogretmen_sicil_no, ders_kodu, islem_tarihi, islem_durumu,ogrenci_sicil_no) VALUES ( ?, ?, ?, ?, ?)";
                                        PreparedStatement preparedStatement11 = connection.prepareStatement(sql11);
                                        preparedStatement11.setInt(1, Integer.parseInt(kullaniciSicili));
                                        preparedStatement11.setString(2, dersKodu);
                                        preparedStatement11.setDate(3, sqlTarih);
                                        preparedStatement11.setString(4, "Ögretmen ders talebi onayladı");
                                        preparedStatement11.setInt(5, Integer.parseInt(ogrencisicili));
                                        preparedStatement11.executeUpdate();

                                    } else {
                                        System.out.println("Belirtilen ders kodu ile eşleşen öğrenci bulunamadı.");
                                    }

                                } catch (SQLException e) {
                                    System.out.println("gui.ogretmen_panel.talep_onayla_buttonActionPerformed()" + e.toString());
                                }
                                // PreparedStatement oluşturma

                                // Bağlantıyı kapatma
                                connection.close();
                                JOptionPane.showMessageDialog(null, "Talep onaylandı", "BİLGİ", JOptionPane.WARNING_MESSAGE);

                            } catch (NumberFormatException e) {
                                System.out.println("Geçersiz şifre formatı: " + e.getMessage());
                            } catch (ClassNotFoundException | SQLException e) {
                                System.out.println("Veritabanı hatası: " + e.getMessage());
                            }

                        } else {
                            // Hiçbir satır seçilmediyse kullanıcıya uyarı verebilirsiniz
                            System.out.println("Lütfen bir öğrenci seçin.");
                            JOptionPane.showMessageDialog(null, "Lütfen bir öğrenci seçin.", "HATA", JOptionPane.WARNING_MESSAGE);

                        }

                        jButton1ActionPerformed(evt);
                    } else {
                        JOptionPane.showMessageDialog(null, "Kontenjan sayısı aşılamaz.", "BİLGİ", JOptionPane.WARNING_MESSAGE);
                    }

                }
            } else {
                System.out.println("Belirtilen şartlara uyan kayıt bulunamadı.");
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_talep_onayla_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ogretmen_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ogretmen_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ogretmen_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ogretmen_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ogretmen_panel(kullaniciSicili, yonetici_ogrenci_talep_sayisi).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ana_sayfa;
    private javax.swing.JTable ders_bilgileri_table;
    private javax.swing.JButton formülüme_göre_ogrencileri_sırala_button;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton ogretmen_ilgi_alani_kaydet_buton;
    private javax.swing.JButton ogretmen_mesaj_buton;
    private javax.swing.JComboBox<String> ogretmen_verdigi_ders_combobox;
    private javax.swing.JTextField ogretmen_ılgı_alanı_textfield;
    private javax.swing.JButton ogretmenin_verdigi_dersler_button;
    private javax.swing.JTable talep_eden_ogrenci_listesi_table;
    private javax.swing.JButton talep_onayla_button;
    // End of variables declaration//GEN-END:variables
}
